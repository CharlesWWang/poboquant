#!/usr/bin/env python
# coding:utf-8
from PoboAPI import *
import datetime
import numpy as np

#开始时间，用于初始化一些参数 分钟级别回测，例子里是15分钟
def OnStart(context) :
    print("I\'m starting...")
    #登录交易账号，需在主页用户管理中设置账号，并把期货测试替换成您的账户名称
    context.myacc = None
    g.barsincesignalcount=0 #统计最近一次信号出现后的k线数量，初始化为0
    
    g.starttocount=0 #是否开始信号k线计数 状态变量，0为不计数，1为计数
    if "回测期货" in context.accounts :
        print("登录交易账号[回测期货]")
        if context.accounts["回测期货"].Login() :
            context.myacc = context.accounts["回测期货"]

def OnMarketQuotationInitialEx(context, exchange,daynight):
    if exchange != 'SHFE':
        return
    #获取主力合约
    g.code = GetMainContract('SHFE', 'rb',20)
    #订阅K线数据，用于驱动OnBar事件
    SubscribeBar(g.code, BarType.Min15)#订阅15分钟k线行情 
    
#实时行情事件，当有新行情出现时调用该事件Ex
def OnBar(context,code,bartype):
    
    
    #过滤掉不需要的行情通知
    if code != g.code:
        return
    dyndata = GetQuote(g.code)
    #计算均线
    MA = GetIndicator("MA",code,params=(5,10),bar_type = BarType.Day)
    MA1 = MA["MA(5)"]
    MA2 = MA["MA(10)"]
    if len(MA2)<2:
        return
    #ma1上穿ma2时买入螺纹主力1手
    elif MA1[-1] >= MA2[-1] and MA1[-2]<MA2[-2]:
        QuickInsertOrder(context.myacc,g.code,'buy','open',dyndata.now,10)
        g.starttocount=1#状态变量设为1，开始计数
        g.barsincesignalcount=0 #出现信号后，初始化计数，确保只统计最近一个信号
        
    #ma1下穿ma2时卖出平仓
    elif MA1[-1] <= MA2[-1] and MA1[-2]>MA2[-2]:
        QuickInsertOrder(context.myacc,g.code,'sell','close',dyndata.now,10)
    if g.starttocount==1:
        
        g.barsincesignalcount=g.barsincesignalcount+1#对k线进行计数
    print("最近一个信号出现后K线根数统计: "+str(g.barsincesignalcount))    
