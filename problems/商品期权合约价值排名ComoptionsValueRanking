def OnStart(context) :
    print "I\'m starting..."
    #登录交易账号，需在主页用户管理中设置账号，并把期货测试替换成您的账户名称
    context.myacc = None

    g.optionsvarietylist=["m","c","CF","SR","cu","ru"]
    if context.accounts.has_key("回测期货") :
        print "登录交易账号[回测期货]"
        if context.accounts["回测期货"].Login() :
            context.myacc = context.accounts["回测期货"]

def OnMarketQuotationInitialEx(context, exchange,daynight):
    if exchange != 'SHFE':
        return
    #获取主力合约
    g.code = GetMainContract('SHFE', 'rb',20)
    #订阅K线数据，用于驱动OnBar事件
    SubscribeBar(g.code, BarType.Day) 
    
    g.resultcalls={}
    g.resultputs={}
    
#实时行情事件，当有新行情出现时调用该事件Ex
def OnBar(context,code,bartype) :
    #过滤掉不需要的行情通知
    if code != g.code:
        return
    for product in g.optionsvarietylist:
        
        contractlist=GetFuturesContracts(GetExchangeByVariety(product),product)
        opcsum=0
        oppsum=0
        for contract in contractlist:
            
            opclist = GetOptionContracts(contract,None,0)#for calls
            opplist = GetOptionContracts(contract,None,1)#for calls
            

            for opc in opclist:

                pricedata=GetQuote(opc)

                value=pricedata.now*pricedata.amount*GetContractInfo(contract)["合约乘数"]
                
                print str(opc) +"  value "+str(value)

                opcsum=opcsum+value
            for opp in opplist:

                pricedata=GetQuote(opp)

                value=pricedata.now*pricedata.amount*GetContractInfo(contract)["合约乘数"]

                oppsum=oppsum+value    
                
            g.resultcalls[product]=opcsum
            g.resultputs[product]=oppsum 
        
                    
    print "calls "+str(sorted(g.resultcalls.items(),key=lambda item:item[1]))
    print "puts "+str(sorted(g.resultputs.items(),key=lambda item:item[1])) 
