# coding:utf-8
#!/usr/bin/env python

from PoboAPI import *
import datetime
#用poboquant python实现，在poboquant上运行，如果有问题 可加群 726895887 咨询
#回测时需自行指定策略在“分钟”级别运行
#设置分钟级别回测可参考 https://www.zhihu.com/question/306448777/answer/557286856
#开始时间，用于初始化一些参数
def OnStart(context) :
  print "I\'m starting..."
  #设定一个全局变量品种
  g.code = GetMainContract("DCE",'m',20)
  
  print "g.code is "+str(g.code)
  #订阅实时数据，用于驱动OnQuote事件
  SubscribeQuote(g.code)
  #订阅K线数据，用于驱动OnBar事件
  SubscribeBar(g.code, BarType.Min)
  #登录交易账号，需在主页用户管理中设置账号，并把证券测试替换成您的账户名称
  context.myacc = None
  g.accountname ="回测期货"
  if context.accounts.has_key(g.accountname) :
    print "登录交易账号 "+str(g.accountname)
    if context.accounts[g.accountname].Login() :
      context.myacc = context.accounts[g.accountname]
  
#实时行情事件，当有新行情出现时调用该事件
def OnQuote(context, code) :
  #过滤掉不需要的行情通知
  if code != g.code :
    return 
  
  #获取最新行情
  dyndata = GetQuote(code)
  if dyndata :
    #.now指最新价，详细属性见API文档
    now1 = dyndata.now
    #打印最新价
    log.info("最新价: " + str(dyndata.now))

  #获取K线数据
  klinedata3 = GetHisData(code, BarType.Min3)#三分钟
  klinedata1 = GetHisData(code, BarType.Min) #一分钟
  #打印K线数据，如最新一根K线的最高价
  if len(klinedata3) > 0 and len(klinedata1)> 0:
    lasthigh3 = klinedata3[-2].high
    lasthigh1 = klinedata1[-2].high
    log.info("最新3分钟K线的最高价: "  + str(lasthigh3))
    log.info("最新1分钟K线的最高价: "  + str(lasthigh1))
    
    
    log.info("3分钟k线数据时间 "+str(klinedata3[-2].datetime))
    
    log.info("1分钟k线数据时间 "+str(klinedata1[-2].datetime))
    
  #如果配置好交易账号了，可以根据条件下单，需把下面中的证券测试账号换成您设置的账号名称
  if len(klinedata3) > 1 and klinedata3[-3].close < klinedata3[-2].close and len(klinedata1) > 1 and klinedata1[-3].close < klinedata1[-2].close and context.myacc :
      # 当日收盘价小于昨收则买入
      print "满足开仓条件......."
      context.myacc.InsertOrder(code, BSType.Buy, dyndata.now, 100)
  elif len(klinedata3) > 1 and klinedata3[-3].close > klinedata3[-2].close  and len(klinedata1) > 1 and klinedata1[-3].close > klinedata1[-2].close and context.myacc :
      # 当日收盘价大于昨收则卖出
      print "满足平仓条件......."
      context.myacc.InsertOrder(code, BSType.Sell, dyndata.now, 100)

#委托回报事件，当有委托回报时调用
def OnOrderChange(context, AccountName, order) :
  #打印委托信息，id是编号，volume是数量，详细见API文档
  print "委托编号： " + order.id + "   账号名称： " + AccountName
  print "Vol: " + str(order.volume) + " Price: " + str(order.price)
